{"version":3,"sources":["logo.svg","Tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setnewTweets","className","onSubmit","event","preventDefault","newTweet","current","value","tempNewTweets","unshift","content","likes","id","ref","type","TweetList","console","log","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadtweets","alert","map","item","index","Tweet","tweet","Actionbtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","kiarietweets"],"mappings":"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","file":"static/js/main.64bd9178.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadtweets} from '../lookup'\n\nexport function TweetsComponent(props){\n  const textAreaRef = React.createRef()\n  const [newTweets, setnewTweets] = useState([])\n  const handleSubmit = (event)=>{\n    event.preventDefault()\n    const newTweet = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newTweet,\n      likes: 5,\n      id: 11361\n     } )\n    setnewTweets(tempNewTweets)\n    textAreaRef.current.value=''\n  }\n\n  return <div className={props.className}>\n    <div className='col-12 mb-3'>\n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} className='form-control'>\n\n        </textarea>\n        <button type='submit' className='btn btn-primary my-3'>tweet</button>\n      </form>\n    </div>\n    <TweetList newTweets={newTweets}/>\n  </div>\n}\n\nexport function TweetList(props){\n    console.log(props.newTweets)\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n      if(final.length !== tweets.length){\n        setTweets(final)\n      }\n    },[props.newTweets, tweets, tweetsInit])\n    useEffect(()=>{\n      const callback = (response, status)=>{\n        if (status===200){\n        setTweetsInit(response)\n        }\n        else{\n          alert(\"There was an error!\")\n        }\n      }\n      loadtweets(callback)\n    },[])\n  \n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n    })\n  }\n\nexport function Actionbtn(props){\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleClick=(event)=>{\n      event.preventDefault()\n      if (action.type === 'like'){\n        if(userLike===true){\n          setLikes(likes-1)\n          setUserLike(!userLike)\n        }\n        else if(userLike===false){\n          setLikes(likes+1)\n          setUserLike(true)\n        }\n        \n      }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: actionDisplay\n    return<button className={className} onClick={handleClick}> {display} </button> \n  }\n  \n  export function Tweet(props){\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n     <p>{tweet.id} - {tweet.content}</p>\n     <div className='btn btn-group'>\n       <Actionbtn tweet={tweet} action={{type:'like', display:'likes'}} className='btn btn-outline-success'/>\n       <Actionbtn tweet={tweet} action={{type:'unlike', display:'unlike'}}className='btn btn-outline-secondary'/>\n       <Actionbtn tweet={tweet} action={{type:'retweet', display:'retweet'}} className='btn btn-outline-primary'/>\n       \n     </div>\n    </div>\n  }","\n\nexport function loadtweets(callback){\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = 'json'\n  \n    xhr.responseType=responseType\n    xhr.open(method, url)\n    xhr.onload = function(){\n        callback(xhr.response, xhr.status)     \n    }\n    xhr.onerror = function(e){\n      callback({'message':'There was an error while making the request!'},400)\n    }\n    xhr.send()\n  }","import {useState, useEffect} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './Tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TweetsComponent } from './Tweets';\n\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst kiarietweets = document.getElementById('KiarieTweets')\nif (kiarietweets){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent/>\n    </React.StrictMode>,\n    kiarietweets\n  )\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}